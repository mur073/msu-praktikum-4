
// chrono::high_resolution_clock::time_point start =
//         chrono::high_resolution_clock::now();

// ....

//     chrono::high_resolution_clock::time_point end =
//         chrono::high_resolution_clock::now();
//     double time_taken =
//         chrono::duration_cast<chrono::nanoseconds>(end - start).count();
//     time_taken *= 1e-9;
//     cout << "Time taken by insert() is : " << fixed << time_taken
//          << setprecision(9) << " sec" << endl;

//     return 0;


void Set::remove(Iterator* iter) {
    if (m_size == 0) return;

    SetIterator* it = dynamic_cast<SetIterator*>(iter);

    if (this != it->set) return;

    SetIterator* itCopy = new SetIterator(this, it->listIt, it->listPos);

    if (it->listIt->hasNext() == 0) it->goToNext();

    m_data[itCopy->listPos]->remove(itCopy->listIt);
    m_size--;

    _memory.freeMem(itCopy);
}